import math
import os
import threading
import time
import tkinter
import tkinter.font as font
import wave
from tkinter import *  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

import pyaudio


class VoiceRecorder():

    def __init__(self):
        self.root = tkinter.Tk()
        self.button = tkinter.Button(
            text="üé§",
            height=3, width=8, # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
            command=self.click_handler
        )
        self.button.pack()
        self.label = tkinter.Label(text="00:00:00")
        self.label.pack()
        self.recording = False
        self.root.mainloop()

    def click_handler(self):
        if self.recording:
            self.recording = False
        else:
            self.recording = True
            threading.Thread(target=self.record).start()

    def record(self, i=None):
        audio = pyaudio.PyAudio()
        stream = audio.open(
            format=pyaudio.paInt16,
            channels=1,
            rate=44100,
            input=True,
            frames_per_buffer=1024
            # input_device_index =
        )

        frames = []
        start = time.time()

        while self.recording:
            data = stream.read(1024, exception_on_overflow=False)
            frames.append(data)

            passed = time.time() - start
            secs = passed % 60
            mins = passed // 60
            hours = mins // 60
            self.label.config(text=f"{int(hours):02d}:{int(mins):02d}:{int(secs):02d}")

        stream.stop_stream()
        stream.close()
        audio.terminate()

        exists = True
        while exists:
            if os.path.exists(f"recordinf{i}.wav"):
                i += 1
            else:
                exists = False

        sound_file = wave.open(f"recording{i}.wav", "wb")
        sound_file.setnchannels(1)
        sound_file.setsampwidth(audio.get_sample_size(pyaudio.paInt16))
        sound_file.setframerate(44100)
        sound_file.writeframes(b"".join(frames))
        sound_file.close()


VoiceRecorder()

root = Tk()  # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
root.geometry("265x450")  # —Ä–∞–∑–º–µ—Ä –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
root.title("–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")  # –º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
root.config(background="silver")  # –∑–∞–¥–∞–µ–º —Ü–≤–µ—Ç
expression = ""  # —Ö—Ä–∞–Ω–∏—Ç –æ–±—â–µ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫–µ
root.resizable(False, False)  # –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –æ–∫–Ω–æ

result = StringVar()
result.set("0")
expression_field = Entry(root, textvariable=result, font=("Verdana", 15,), bd=12,
                         insertwidth=4, justify=RIGHT)  # –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—è –≤–≤–æ–¥–∞
expression_field.pack()  # —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞

frame = Frame(
    root,
    background="silver"
)
frame.pack(expand=True)


def press_num(num):  # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    global expression  # –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–æ–∂–µ–º –µ–µ –∏–∑–º–µ–Ω—è—Ç—å
    expression += str(num)
    result.set(expression)


def equal_press():  # –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Ä–∞–≤–Ω–æ
    try:  # —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–æ–±—ã–≤–∞—Ç—å —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
        global expression
        total = (eval(expression))  # –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∏—Å–ª–æ–≤–æ–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç expression
        if total % 1 == 0:
            total = int(total)  # —É–±–∏—Ä–∞–µ–º 5 == 5.0
        result.set(str(total))  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total
        expression = str(total)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ total
    except:
        result.set("–û—à–∏–±–∫–∞")  # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–∫–∞
        expression = ""  # –æ–±–Ω—É–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ expression


def convertor():  # –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    actual_coin = list_of_coins.get(list_of_coins.curselection())  # —Ö—Ä–∞–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–±—Ä–∞–Ω–æ –í –î–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    multiplication = 1
    if actual_coin == coins[0]:
        multiplication = 0.01
    elif actual_coin == coins[1]:
        multiplication = 100
    elif actual_coin == coins[2]:
        multiplication = 0.009091
    elif actual_coin == coins[3]:
        multiplication = 110
    global expression
    total = str(eval(expression) * multiplication)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç—Ä–æ–∫—É
    result.set(total)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expression = total


def sqrt_exp():
    global expression
    total = str(math.sqrt(eval(expression)))  # —Å—á–∏—Ç–∞–µ–º –∫–æ—Ä–µ–Ω—å
    result.set(total)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total
    expression = total  # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ total


def sqr_exp():
    global expression
    total = str(eval(expression) * eval(expression))  # —Å—á–∏—Ç–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç
    result.set(total)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total
    expression = total  # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ total


def reset():
    global expression
    total = ""
    result.set(total)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total
    expression = total  # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ total


def percent1():
    global expression
    total = str(eval(expression) / 100)  # —Å—á–∏—Ç–∞–µ–º  %
    result.set(total)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ total
    expression = total  # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ total


myFont = font.Font(family='Helvetica', size=10, weight='bold')

button1 = Button(
    frame,
    text="1", height=3, width=8, command=lambda: press_num(1))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button1.grid(row=5, column=0, padx=0, pady=0, ipadx=0, ipady=0)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button2 = Button(
    frame,
    text="2", height=3, width=8, command=lambda: press_num(2))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button2.grid(row=5, column=1)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button3 = Button(
    frame,
    text="3", height=3, width=8, command=lambda: press_num(3))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button3.grid(row=5, column=2)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button4 = Button(
    frame,
    text="4", height=3, width=8, command=lambda: press_num(4))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button4.grid(row=4, column=0)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button5 = Button(
    frame,
    text="5", height=3, width=8, command=lambda: press_num(5))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button5.grid(row=4, column=1)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button6 = Button(
    frame,
    text="6", height=3, width=8, command=lambda: press_num(6))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button6.grid(row=4, column=2)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button7 = Button(
    frame,
    text="7", height=3, width=8, command=lambda: press_num(7))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button7.grid(row=3, column=0)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button8 = Button(
    frame,
    text="8", height=3, width=8, command=lambda: press_num(8))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button8.grid(row=3, column=1)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button9 = Button(
    frame,
    text="9", height=3, width=8, command=lambda: press_num(9))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button9.grid(row=3, column=2)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

plus = Button(
    frame,
    text="+", height=3, width=8, bg="silver", command=lambda: press_num("+"))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
plus.grid(row=5, column=3)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

button0 = Button(
    frame,
    text="0", height=3, width=8, command=lambda: press_num(0))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
button0.grid(row=6, column=0)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

minus = Button(
    frame,
    text="‚Äî", height=3, width=8, bg="silver", command=lambda: press_num("-"))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
minus.grid(row=4, column=3)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

equal = Button(
    frame,
    text="=", height=3, width=8, command=equal_press, bg="orange", fg="black")  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
equal.grid(row=6, column=2)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

multiply = Button(
    frame,
    text="√ó", height=3, width=8, bg="silver", command=lambda: press_num("*"))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
multiply.grid(row=3, column=3)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

dele = Button(
    frame,
    text="√∑", height=3, width=8, bg="silver", command=lambda: press_num("√∑"))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
dele.grid(row=2, column=3)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

toch = Button(
    frame,
    text=".", height=3, width=8, command=lambda: press_num("."))  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
toch.grid(row=6, column=1)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

coins = ["Rub to Dollar(–ö—É—Ä—Å:100 —Ä—É–±–ª–µ–π - 1 –¥–æ–ª–ª–∞—Ä)", "Dollar to Rub(–ö—É—Ä—Å:100 —Ä—É–±–ª–µ–π - 1 –¥–æ–ª–ª–∞—Ä)",
         "Rub to Euro(–ö—É—Ä—Å:110 —Ä—É–±–ª–µ–π - 1 –µ–≤—Ä–æ)",
         "Euro to Rub(–ö—É—Ä—Å:110 —Ä—É–±–ª–µ–π - 1 –µ–≤—Ä–æ)"]  # —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
coins_variable = Variable(value=coins)  # —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
list_of_coins = Listbox(width=43, height=4, listvariable=coins_variable)  # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
# —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏ –≤—ã–±–µ—Ä–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã, –∑–∞–¥–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É
list_of_coins.pack()

convert = Button(text="convert", height=3, width=8, command=convertor)  # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω–≤–µ—Ä—Ç
convert.pack()
# –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ

sqrt = Button(
    frame,
    text="‚àö", height=3, width=8, bg="silver", command=sqrt_exp)
sqrt.grid(row=2, column=2)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

sqr = Button(
    frame,
    text="–•¬≤", height=3, width=8, bg="silver", command=sqr_exp)
sqr.grid(row=2, column=1)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

reset = Button(
    frame,
    text="C  ", height=3, width=8, bg="silver", command=reset)  # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –∑–Ω–∞—á–µ–Ω–∏—è
reset.grid(row=2, column=0)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

percent = Button(
    frame,
    text="%", height=3, width=8, bg="silver", command=percent1)  # –∑–∞–¥–∞–µ–º –∏ —É–≤–µ–ª–∏—á–∏–≤—ã–µ–º –∫–Ω–æ–ø–∫—É
percent.grid(row=6, column=3)  # —Ä–∞—Å–ø–æ–ª–æ–∂–µ–º –∫–Ω–æ–ø–∫—É

root.mainloop()  # –≤—ã–≤–æ–¥–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ —ç–∫—Ä–∞–Ω
